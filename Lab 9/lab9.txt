Justin Ma
Lab 9

================================================================================
SETTING UP


<git clone ~eggert/src/gnu/diffutils>
<cd diffutils>
	Produces a copy of the diffutils repository and changes into that directory.


<git log > ../git-log.txt>
	Transcribes the log of changes of diffutils into git-log.txt.


<git tag > ../git-tags.txt>
	Transcribes a list of tags used for diffutils into git-tag.txt.


<emacs ../git-log.txt>
<C-s>
<maint: quote>
	Open the git-log.txt file in emacs and search for the commit containing "maint: quote 
'like this' or "like this", not `like this'". This was found after only typing "maint: 
quote". I found that the commit ID was 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f. 


<git format-patch -1 --stdout 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f > quote-patch.txt>
	Generates patch for that commit and places it in file quote-patch.txt. The -1 flag 
limits the number of commits to 1. The --stdout flag prints commit to standard output.


<git checkout -b 'branch3.0' 'v3.0'>
	Checks out version 3.0 of diffutils. The -b flag creates a new branch which I named 
'branch3.0'. This branch starts at 'v3.0'. 


<man patch>
	I read the manual page on how to use the patch command. We will need to use -p1 to 
strip the a/ and b/ leading slashes in the patch file.


<patch -p1 < quote-patch.txt>
	Runs patch command applying the changes in quote-patch.diff to version 3.0 of 
diffutils. 


================================================================================
FIXING PATCH


Missing files to patch:
	- HACKING

	- doc/diffutils.texi

	- man/help2man


	Every time it asked to skip a patch, I hit enter and confirmed with 'y'.


Failed patches:
	patching file README
	Hunk #1 FAILED at 9.
	Hunk #3 FAILED at 60.

	patching file README-hacking
	Hunk #1 FAILED at 19.

	patching file cfg.mk
	Hunk #1 FAILED at 29.

	patching file src/diff.c
	[...]
	Hunk #10 FAILED at 876.
	Hunk #11 FAILED at 906.
	Hunk #12 FAILED at 942.

	patching file src/diff3.c
	[...]
	Hunk #6 FAILED at 433.


<git status>
	Provides an overview of what has occurred. 
Output:

On branch branch3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   NEWS
	modified:   README
	modified:   TODO
	modified:   doc/diagmeet.note
	modified:   ms/config.bat
	modified:   ms/config.site
	modified:   po/en.po
	modified:   src/analyze.c
	modified:   src/cmp.c
	modified:   src/context.c
	modified:   src/diff.c
	modified:   src/diff.h
	modified:   src/diff3.c
	modified:   src/dir.c
	modified:   src/ifdef.c
	modified:   src/io.c
	modified:   src/sdiff.c
	modified:   src/side.c
	modified:   src/system.h
	modified:   src/util.c
	modified:   tests/help-version

Untracked files:
  (use "git add <file>..." to include in what will be committed)

	NEWS.orig
	README-hacking.orig
	README-hacking.rej
	README.orig
	README.rej
	cfg.mk.orig
	cfg.mk.rej
	git-log.txt
	git-tag.txt
	ms/config.site.orig
	quote-patch.txt
	src/cmp.c.orig
	src/context.c.orig
	src/diff.c.orig
	src/diff.c.rej
	src/diff.h.orig
	src/diff3.c.orig
	src/diff3.c.rej
	src/dir.c.orig
	src/sdiff.c.orig
	src/system.h.orig
	src/util.c.orig
	tests/help-version.orig

no changes added to commit (use "git add" and/or "git commit -a")


	I learned that vc-diff (C-x v =) shows the differences between the edited file and 
the original file. The function vc-revert (C-x v u) reverts edited files back to their 
original state. The function diff-apply-hunk (C-c C-a) applies the hunk to some target file 
while appending (C-u) undos this action. Finally, the function diff-goto-source (C-c C-c) 
finds the source file of the hunk of interest.

	First, I reverted all files other than .c files by typing (C-x v u) which undos the 
entire file. An example is shown below.


<emacs NEWS>
<C-x v u>
<yes>
<C-x C-c>


	This process was done for NEWS, README, TODO, doc/diagmeet.note, ms/config.bat, ms/
config.site, po/en.po, src/diff.h, src/system.h, tests/help-version>


	Next, I reverted any changes in the comments of the .c files, since that won't change 
the actual program. To do this, I opened each file with emacs, then typed (C-x v =) do see 
all the changes made. Depending on whether or not it was a comment I typed (C-u C-c C-a) to 
undo the changes for that specific hunk. An example is shown below.


<emacs src/analyze.c>
<C-x v =>
	(manually move cursor to start of selected hunk)
<C-u C-c C-a>
	(repeat if necessary)
<C-x C-c>
<y>


	This process was done for src/analyze.c, src/cmp.c, src/context.c, src/diff.c, src/
diff3.c, src/dir.c, src/ifdef.c, src/io.c, src/sdiff.c, src/side.c, and src/util.c. 


	Next, I looked at the rejected files in the src directory. There were only 2: 
diff.c.rej and diff3.c.rej. I opened the rejected diff file and the original file at a time 
with emacs.


<emacs src/diff.c.rej src/diff.c>
	To switch windows, I used the command <C-x o> and to skip to a certain line, I used 
the command <M-g M-g> and typed the line number. For each .c file, I found the line and 
manually changed the accent into a single quotation mark. 


<emacs src/diff3.c.rej src/diff3.c>
	I did the same for diff3.c.


<rm NEWS.orig README-hacking.orig README-hacking.rej README.orig \
README.rej cfg.mk.orig cfg.mk.rej git-log.txt git-tag.txt \
ms/config.site.orig quote-patch.txt src/cmp.c.orig src/context.c.orig \
src/diff.c.orig src/diff.c.rej src/diff.h.orig src/diff3.c.orig \
src/diff3.c.rej src/dir.c.orig src/sdiff.c.orig src/system.h.orig \
src/util.c.orig tests/help-version.orig>
	Delete all files under untracked files when I ran <git status>. 


================================================================================
CHECKING PATCH


<git status>
Output:

On branch branch3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

	modified:   src/cmp.c
	modified:   src/diff.c
	modified:   src/diff3.c
	modified:   src/dir.c
	modified:   src/sdiff.c
	modified:   src/util.c

no changes added to commit (use "git add" and/or "git commit -a")

	I ran git status to confirm only half a dozen modified files existed. Then, I checked 
if the git diff command gave a file with 300-400 lines.


<git diff | wc -l>
Output:	
	337

	This is within the expected range. Now, the output needs to be put into a file named 
quote-3.0-patch.txt.


<git diff > ../quote-3.0-patch.txt>


<emacs README-hacking>
	Includes instructions for how to configure program. Before I ran bootstrap, I tweaked 
the tests/Makefile.am file and made other changes.


<emacs tests/Makefile.am>
	I manually removed "shell_or_perl_" near the end of the file.


<chmod +x tests/binary tests/no-newline-at-eof>
	Changed permission of files.


<./bootstrap>


<wget http://web.cs.ucla.edu/classes/fall17/cs35L/assign/diffutils-gets.diff>
	Downloads extra patch required. The diff file is downloaded as diffutils-gets.diff.


<emacs diffutils-gets.diff>
	I opened the file to check which flag I should use. I determined no leading slashes 
need to be removed, so I can use '-p0'.


<patch -p0 < diffutils-gets.diff>
	Applies the patch.


<./configure>
<make>
<make check>

<./src/diff . ->
Output:
	./src/diff: cannot compare '-' to a directory

	As expected, the error messaged used single quotes instead of accents.

<./src/diff --help>
	The output of this also included only single quotes.


<cd ..>
<mkdir diffutils-3.0 diffutils-3.0-patch>
	This is for the sanity check. diffutils-3.0 will contain the original source code and 
diffutils-3.0-patch will contain the new source code.


<cp diffutils/src/*.c diffutils-3.0-patch>
	Copies source files into diffutils-3.0-patch.


<git clone ~eggert/src/gnu/diffutils diffutils-3.0-og>
	Produces another copy of diffutils into diffutils-3.0-og. The original source files 
are in here, but first, I need to update the version.


<cd diffutils-3.0-og>
<git checkout -b '3.0' 'v3.0'>
	Changes branch to new branch '3.0'
<cd ..>


<cp diffutils-3.0-og/src/*.c diffutils-3.0>
	Copies source files from original version into diffutils-3.0.


<diffutils/src/diff -pru diffutils-3.0 diffutils-3.0-patch >quote-3.0-test.txt>
	Places differences from the source code of each version into the file quote-3.0-
test.txt, which I can compare to quote-3.0-patch.txt.


<diff quote-3.0-patch.txt quote-3.0-test.txt>
	This compares the two files, which are far from identical. However, looking through 
the differences, none of them affect the actual content. Only the paths or directories. Thus, 
the differences are innocuous. 


================================================================================
